#!/usr/bin/env python

import argparse
import datetime
import pprint

import githubapi
import repoanalyzer
import webrequest


def load_arguments():
    """
    Load and parse command line arguments

    Returns:
        argparse.Namespace
    """
    parser = argparse.ArgumentParser(description='GitHub repository analysis utility')

    parser.add_argument('url', type=str,
                        metavar='URL', help='repository URL (format: [schema:]//github.com/owner/repo')
    parser.add_argument('-s', '--start-date', type=str, default=None,
                        metavar='DATE', help='analysis start date (yyy-MM-dd format) or unlimited')
    parser.add_argument('-e', '--end-date', type=str, default=None,
                        metavar='DATE', help='analysis end date (yyy-MM-dd format) or unlimited')
    parser.add_argument('-b', '--branch', type=str, default='master',
                        metavar='BRANCH', help='repository branch (default: %(default)s')
    parser.add_argument('-u', '--user', type=str, default=None,
                        metavar='USER', help='GitHub login')
    parser.add_argument('-p', '--password', type=str, default=None,
                        metavar='PASSW0!D', help='GitHub password')
    parser.add_argument('-t', '--type', type=str, choices=['table', 'json'], default='table',
                        metavar='TYPE', help='Output type')

    return parser.parse_args()


def todatetime(s):
    """
    Cast date-time ISO string to

    Args:
        s (str): valid ISO date-time

    Returns:
        datetime.datetime or None
    """
    return s and datetime.datetime.combine(
        datetime.date.fromisoformat(s),
        datetime.datetime.min.time())


def main():
    args = load_arguments()

    url = args.url
    start_date = todatetime(args.start_date)
    end_date = todatetime(args.end_date)
    branch = args.branch
    credentials = (args.user, args.password)

    repo = githubapi.Repo(*githubapi.parse_url(url), api=webrequest, credentials=credentials) \
        .load().parse().load_containers()

    reports = build_reports(repo, start_date, end_date)
    print_reports(reports)


def build_reports(repo, start_date, end_date):
    """
    Build needed reports

    Args:
        repo (Repo): loaded repository
        start_date (datetime.datetime): analyze start date
        end_date (datetime.datetime): analyze end date

    Returns:
        list(Report)
    """
    dated_report_args = (repo, start_date, end_date)

    reports = []
    reports += [repoanalyzer.ActiveContributors(repo)]
    reports += [report(*dated_report_args) for report in [
                   repoanalyzer.OpenedClosedPulls,
                   repoanalyzer.OldPulls,
                   repoanalyzer.OpenedClosedIssues]]

    for report in reports:
        report.analyze()

    return reports


def print_reports(reports):
    """
    Print reports as tables

    Args:
        reports (list(Report)): list of analyzed reports
    """
    for report in reports:
        print(report.table(), end='\n\n')


def json_reports(reports):
    """
    Print reports as JSON

    Args:
        reports (list(Report)): list of analyzed reports
    """
    pprint.pprint([report.json() for report in reports])


if __name__ == '__main__':
    main()
