#!/usr/bin/env python

import argparse
import datetime
import sys

import githubapi
import repoanalyzer
import webrequest


def load_arguments():
    """
    Load and parse command line arguments

    Returns:
        argparse.Namespace
    """
    parser = argparse.ArgumentParser(description='GitHub repository analysis utility')

    parser.add_argument('url', type=str,
                        metavar='URL', help='repository URL (format: [schema:]//github.com/owner/repo')
    parser.add_argument('-s', '--start-date', type=str, default=None,
                        metavar='DATE', help='analysis start date (yyy-MM-dd format) or unlimited')
    parser.add_argument('-e', '--end-date', type=str, default=None,
                        metavar='DATE', help='analysis end date (yyy-MM-dd format) or unlimited')
    parser.add_argument('-b', '--branch', type=str, default='master',
                        metavar='BRANCH', help='repository branch (default: %(default)s')
    parser.add_argument('-u', '--user', type=str, default=None,
                        metavar='USER', help='GitHub login')
    parser.add_argument('-p', '--password', type=str, default=None,
                        metavar='PASSW0!D', help='GitHub password')

    return parser.parse_args()


def todatetime(s):
    """
    Cast date-time ISO string to

    Args:
        s (str): valid ISO date-time

    Returns:
        datetime.datetime or None
    """
    return s and datetime.datetime.combine(
        datetime.date.fromisoformat(s),
        datetime.datetime.min.time())


def main():
    args = load_arguments()

    url = args.url
    start_date = todatetime(args.start_date)
    end_date = todatetime(args.end_date)
    branch = args.branch
    credentials = (args.user, args.password)

    print(url, start_date, end_date, branch)
    repo = githubapi.Repo(*githubapi.parse_url(url), api=webrequest, credentials=credentials) \
        .load() \
        .load_containers()

    print(repo)

    reports = [repoanalyzer.ActiveContributors(repo).analyze(),
               repoanalyzer.OpenedClosedPulls(repo, start_date, end_date).analyze(),
               repoanalyzer.OldPulls(repo, start_date, end_date).analyze(),
               repoanalyzer.OpenedClosedIssues(repo, start_date, end_date).analyze()]
    for report in reports:
        print(report.table())


if __name__ == '__main__':
    main()
